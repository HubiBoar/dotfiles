general:
  # Commands to run when the WM has started. This is useful for running a
  # script or launching another application.
  # Example: The below command launches Zebar.
  # Commands to run just before the WM is shutdown.
  # Example: The below command kills Zebar.

  # Commands to run after the WM config is reloaded.
  config_reload_commands: []

  # Whether to automatically focus windows underneath the cursor.
  focus_follows_cursor: false

  # Whether to switch back and forth between the previously focused
  # workspace when focusing the current workspace.
  toggle_workspace_on_refocus: false

  cursor_jump:
    # Whether to automatically move the cursor on the specified trigger.
    enabled: false

    # Trigger for cursor jump:
    # - 'monitor_focus': Jump when focus changes between monitors.
    # - 'window_focus': Jump when focus changes between windows.
    trigger: 'monitor_focus'

gaps:
  # Whether to scale the gaps with the DPI of the monitor.
  scale_with_dpi: true

  # Gap between adjacent windows.
  inner_gap: '0px'

  # Gap between windows and the screen edge.
  outer_gap:
    top: '0px'
    right: '0px'
    bottom: '0px'
    left: '0px'

window_effects:
  # Visual effects to apply to the focused window.
  focused_window:
    # Highlight the window with a colored border.
    # ** Exclusive to Windows 11 due to API limitations.
    border:
      enabled: true
      color: '#8dbcff'

    # Remove the title bar from the window's frame. Note that this can
    # cause rendering issues for some applications.
    hide_title_bar:
      enabled: false

    # Change the corner style of the window's frame.
    # ** Exclusive to Windows 11 due to API limitations.
    corner_style:
      enabled: false
      # Allowed values: 'square', 'rounded', 'small_rounded'.
      style: 'square'

  # Visual effects to apply to non-focused windows.
  other_windows:
    border:
      enabled: true
      color: '#a1a1a1'
    hide_title_bar:
      enabled: false
    corner_style:
      enabled: false
      style: 'square'

window_behavior:
  # New windows are created in this state whenever possible.
  # Allowed values: 'tiling', 'floating'.
  initial_state: 'floating'

  # Sets the default options for when a new window is created. This also
  # changes the defaults for when the state change commands, like
  # `set-floating`, are used without any flags.
  state_defaults:
    floating:
      # Whether to center floating windows by default.
      centered: false

      # Whether to show floating windows as always on top.
      shown_on_top: false

    fullscreen:
      # Maximize the window if possible. If the window doesn't have a
      # maximize button, then it'll be fullscreen'ed normally instead.
      maximized: false

      # Whether to show fullscreen windows as always on top.
      shown_on_top: false

workspaces:
  - name: '1'
    display_name: "Work"
    keep_alive: true
  - name: '2'
    display_name: "Work-Teams"
    keep_alive: true
  - name: '3'
    display_name: "Work-Browser"
    keep_alive: true
  - name: '4'
  - name: '5'
  - name: '6'
  - name: '7'
  - name: '8'
  - name: '9'

window_rules:
  - commands: ['ignore']
    match:
      # Ignores any Zebar windows.
      - window_process: { equals: 'zebar' }

      # Ignores picture-in-picture windows for browsers.
      - window_title: { regex: '[Pp]icture.in.[Pp]icture' }
        window_class: { regex: 'Chrome_WidgetWin_1|MozillaDialogClass' }

      # Ignore rules for various 3rd-party apps.
      - window_process: { equals: 'PowerToys' }
        window_class: { regex: 'HwndWrapper\[PowerToys\.PowerAccent.*?\]' }
      - window_process: { equals: 'PowerToys' }
        window_title: { regex: '.*? - Peek' }
      - window_process: { equals: 'Lively' }
        window_class: { regex: 'HwndWrapper' }

binding_modes:

keybindings:
  # Redraw all windows.
  - commands: ['wm-redraw']
    bindings: ['alt+shift+w']

  # Launch CMD terminal. Alternatively, use `shell-exec wt` or
  # `shell-exec %ProgramFiles%/Git/git-bash.exe` to start Windows
  # Terminal and Git Bash respectively.

  # Focus the next/previous workspace defined in `workspaces` config.

  # Focus the workspace that last had focus.

  # Change focus to a workspace defined in `workspaces` config.
  - commands: ['focus --workspace 1']
    bindings: ['lalt+1']
  - commands: ['focus --workspace 2']
    bindings: ['lalt+2']
  - commands: ['focus --workspace 3']
    bindings: ['lalt+3']
  - commands: ['focus --workspace 4']
    bindings: ['lalt+4']
  - commands: ['focus --workspace 5']
    bindings: ['lalt+5']
  - commands: ['focus --workspace 6']
    bindings: ['lalt+6']
  - commands: ['focus --workspace 7']
    bindings: ['lalt+7']
  - commands: ['focus --workspace 8']
    bindings: ['lalt+8']
  - commands: ['focus --workspace 9']
    bindings: ['lalt+9']

  - commands: ['focus --workspace 1']
    bindings: ['ralt+1']
  - commands: ['focus --workspace 2']
    bindings: ['ralt+2']
  - commands: ['focus --workspace 3']
    bindings: ['ralt+3']
  - commands: ['focus --workspace 4']
    bindings: ['ralt+4']
  - commands: ['focus --workspace 5']
    bindings: ['ralt+5']
  - commands: ['focus --workspace 6']
    bindings: ['ralt+6']
  - commands: ['focus --workspace 7']
    bindings: ['ralt+7']
  - commands: ['focus --workspace 8']
    bindings: ['ralt+8']
  - commands: ['focus --workspace 9']
    bindings: ['ralt+9']

  # Move the focused window's parent workspace to a monitor in a given
  # direction.

  # Move focused window to a workspace defined in `workspaces` config.
  - commands: ['move --workspace 1', 'focus --workspace 1']
    bindings: ['lalt+shift+1']
  - commands: ['move --workspace 2', 'focus --workspace 2']
    bindings: ['lalt+shift+2']
  - commands: ['move --workspace 3', 'focus --workspace 3']
    bindings: ['lalt+shift+3']
  - commands: ['move --workspace 4', 'focus --workspace 4']
    bindings: ['lalt+shift+4']
  - commands: ['move --workspace 5', 'focus --workspace 5']
    bindings: ['lalt+shift+5']
  - commands: ['move --workspace 6', 'focus --workspace 6']
    bindings: ['lalt+shift+6']
  - commands: ['move --workspace 7', 'focus --workspace 7']
    bindings: ['lalt+shift+7']
  - commands: ['move --workspace 8', 'focus --workspace 8']
    bindings: ['lalt+shift+8']
  - commands: ['move --workspace 9', 'focus --workspace 9']
    bindings: ['lalt+shift+9']

  - commands: ['move --workspace 1', 'focus --workspace 1']
    bindings: ['ralt+shift+1']
  - commands: ['move --workspace 2', 'focus --workspace 2']
    bindings: ['ralt+shift+2']
  - commands: ['move --workspace 3', 'focus --workspace 3']
    bindings: ['ralt+shift+3']
  - commands: ['move --workspace 4', 'focus --workspace 4']
    bindings: ['ralt+shift+4']
  - commands: ['move --workspace 5', 'focus --workspace 5']
    bindings: ['ralt+shift+5']
  - commands: ['move --workspace 6', 'focus --workspace 6']
    bindings: ['ralt+shift+6']
  - commands: ['move --workspace 7', 'focus --workspace 7']
    bindings: ['ralt+shift+7']
  - commands: ['move --workspace 8', 'focus --workspace 8']
    bindings: ['ralt+shift+8']
  - commands: ['move --workspace 9', 'focus --workspace 9']
    bindings: ['ralt+shift+9']
